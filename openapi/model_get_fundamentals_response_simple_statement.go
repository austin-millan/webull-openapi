/*
 * Webull API
 *
 * Webull API Documentation
 *
 * API version: 3.0.1
 * Contact: austin.millan@gmail.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GetFundamentalsResponseSimpleStatement struct for GetFundamentalsResponseSimpleStatement
type GetFundamentalsResponseSimpleStatement struct {
	CurrencyName *string `json:"currencyName,omitempty"`
	Labels *[]GetFundamentalsResponseLabels `json:"labels,omitempty"`
	List *[]GetFundamentalsResponseList `json:"list,omitempty"`
	ReportType *int32 `json:"reportType,omitempty"`
	Single *GetFundamentalsResponseSingle `json:"single,omitempty"`
	StatementType *int32 `json:"statementType,omitempty"`
	Title *string `json:"title,omitempty"`
}

// NewGetFundamentalsResponseSimpleStatement instantiates a new GetFundamentalsResponseSimpleStatement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetFundamentalsResponseSimpleStatement() *GetFundamentalsResponseSimpleStatement {
	this := GetFundamentalsResponseSimpleStatement{}
	return &this
}

// NewGetFundamentalsResponseSimpleStatementWithDefaults instantiates a new GetFundamentalsResponseSimpleStatement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetFundamentalsResponseSimpleStatementWithDefaults() *GetFundamentalsResponseSimpleStatement {
	this := GetFundamentalsResponseSimpleStatement{}
	return &this
}

// GetCurrencyName returns the CurrencyName field value if set, zero value otherwise.
func (o *GetFundamentalsResponseSimpleStatement) GetCurrencyName() string {
	if o == nil || o.CurrencyName == nil {
		var ret string
		return ret
	}
	return *o.CurrencyName
}

// GetCurrencyNameOk returns a tuple with the CurrencyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetFundamentalsResponseSimpleStatement) GetCurrencyNameOk() (*string, bool) {
	if o == nil || o.CurrencyName == nil {
		return nil, false
	}
	return o.CurrencyName, true
}

// HasCurrencyName returns a boolean if a field has been set.
func (o *GetFundamentalsResponseSimpleStatement) HasCurrencyName() bool {
	if o != nil && o.CurrencyName != nil {
		return true
	}

	return false
}

// SetCurrencyName gets a reference to the given string and assigns it to the CurrencyName field.
func (o *GetFundamentalsResponseSimpleStatement) SetCurrencyName(v string) {
	o.CurrencyName = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *GetFundamentalsResponseSimpleStatement) GetLabels() []GetFundamentalsResponseLabels {
	if o == nil || o.Labels == nil {
		var ret []GetFundamentalsResponseLabels
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetFundamentalsResponseSimpleStatement) GetLabelsOk() (*[]GetFundamentalsResponseLabels, bool) {
	if o == nil || o.Labels == nil {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *GetFundamentalsResponseSimpleStatement) HasLabels() bool {
	if o != nil && o.Labels != nil {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []GetFundamentalsResponseLabels and assigns it to the Labels field.
func (o *GetFundamentalsResponseSimpleStatement) SetLabels(v []GetFundamentalsResponseLabels) {
	o.Labels = &v
}

// GetList returns the List field value if set, zero value otherwise.
func (o *GetFundamentalsResponseSimpleStatement) GetList() []GetFundamentalsResponseList {
	if o == nil || o.List == nil {
		var ret []GetFundamentalsResponseList
		return ret
	}
	return *o.List
}

// GetListOk returns a tuple with the List field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetFundamentalsResponseSimpleStatement) GetListOk() (*[]GetFundamentalsResponseList, bool) {
	if o == nil || o.List == nil {
		return nil, false
	}
	return o.List, true
}

// HasList returns a boolean if a field has been set.
func (o *GetFundamentalsResponseSimpleStatement) HasList() bool {
	if o != nil && o.List != nil {
		return true
	}

	return false
}

// SetList gets a reference to the given []GetFundamentalsResponseList and assigns it to the List field.
func (o *GetFundamentalsResponseSimpleStatement) SetList(v []GetFundamentalsResponseList) {
	o.List = &v
}

// GetReportType returns the ReportType field value if set, zero value otherwise.
func (o *GetFundamentalsResponseSimpleStatement) GetReportType() int32 {
	if o == nil || o.ReportType == nil {
		var ret int32
		return ret
	}
	return *o.ReportType
}

// GetReportTypeOk returns a tuple with the ReportType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetFundamentalsResponseSimpleStatement) GetReportTypeOk() (*int32, bool) {
	if o == nil || o.ReportType == nil {
		return nil, false
	}
	return o.ReportType, true
}

// HasReportType returns a boolean if a field has been set.
func (o *GetFundamentalsResponseSimpleStatement) HasReportType() bool {
	if o != nil && o.ReportType != nil {
		return true
	}

	return false
}

// SetReportType gets a reference to the given int32 and assigns it to the ReportType field.
func (o *GetFundamentalsResponseSimpleStatement) SetReportType(v int32) {
	o.ReportType = &v
}

// GetSingle returns the Single field value if set, zero value otherwise.
func (o *GetFundamentalsResponseSimpleStatement) GetSingle() GetFundamentalsResponseSingle {
	if o == nil || o.Single == nil {
		var ret GetFundamentalsResponseSingle
		return ret
	}
	return *o.Single
}

// GetSingleOk returns a tuple with the Single field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetFundamentalsResponseSimpleStatement) GetSingleOk() (*GetFundamentalsResponseSingle, bool) {
	if o == nil || o.Single == nil {
		return nil, false
	}
	return o.Single, true
}

// HasSingle returns a boolean if a field has been set.
func (o *GetFundamentalsResponseSimpleStatement) HasSingle() bool {
	if o != nil && o.Single != nil {
		return true
	}

	return false
}

// SetSingle gets a reference to the given GetFundamentalsResponseSingle and assigns it to the Single field.
func (o *GetFundamentalsResponseSimpleStatement) SetSingle(v GetFundamentalsResponseSingle) {
	o.Single = &v
}

// GetStatementType returns the StatementType field value if set, zero value otherwise.
func (o *GetFundamentalsResponseSimpleStatement) GetStatementType() int32 {
	if o == nil || o.StatementType == nil {
		var ret int32
		return ret
	}
	return *o.StatementType
}

// GetStatementTypeOk returns a tuple with the StatementType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetFundamentalsResponseSimpleStatement) GetStatementTypeOk() (*int32, bool) {
	if o == nil || o.StatementType == nil {
		return nil, false
	}
	return o.StatementType, true
}

// HasStatementType returns a boolean if a field has been set.
func (o *GetFundamentalsResponseSimpleStatement) HasStatementType() bool {
	if o != nil && o.StatementType != nil {
		return true
	}

	return false
}

// SetStatementType gets a reference to the given int32 and assigns it to the StatementType field.
func (o *GetFundamentalsResponseSimpleStatement) SetStatementType(v int32) {
	o.StatementType = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *GetFundamentalsResponseSimpleStatement) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetFundamentalsResponseSimpleStatement) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *GetFundamentalsResponseSimpleStatement) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *GetFundamentalsResponseSimpleStatement) SetTitle(v string) {
	o.Title = &v
}

func (o GetFundamentalsResponseSimpleStatement) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CurrencyName != nil {
		toSerialize["currencyName"] = o.CurrencyName
	}
	if o.Labels != nil {
		toSerialize["labels"] = o.Labels
	}
	if o.List != nil {
		toSerialize["list"] = o.List
	}
	if o.ReportType != nil {
		toSerialize["reportType"] = o.ReportType
	}
	if o.Single != nil {
		toSerialize["single"] = o.Single
	}
	if o.StatementType != nil {
		toSerialize["statementType"] = o.StatementType
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	return json.Marshal(toSerialize)
}

type NullableGetFundamentalsResponseSimpleStatement struct {
	value *GetFundamentalsResponseSimpleStatement
	isSet bool
}

func (v NullableGetFundamentalsResponseSimpleStatement) Get() *GetFundamentalsResponseSimpleStatement {
	return v.value
}

func (v *NullableGetFundamentalsResponseSimpleStatement) Set(val *GetFundamentalsResponseSimpleStatement) {
	v.value = val
	v.isSet = true
}

func (v NullableGetFundamentalsResponseSimpleStatement) IsSet() bool {
	return v.isSet
}

func (v *NullableGetFundamentalsResponseSimpleStatement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetFundamentalsResponseSimpleStatement(val *GetFundamentalsResponseSimpleStatement) *NullableGetFundamentalsResponseSimpleStatement {
	return &NullableGetFundamentalsResponseSimpleStatement{value: val, isSet: true}
}

func (v NullableGetFundamentalsResponseSimpleStatement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetFundamentalsResponseSimpleStatement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


