/*
 * Webull API
 *
 * Webull API Documentation
 *
 * API version: 3.0.1
 * Contact: austin.millan@gmail.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AlertEventWarning struct for AlertEventWarning
type AlertEventWarning struct {
	Remove *bool `json:"remove,omitempty"`
	Rules *[]SmartRule `json:"rules,omitempty"`
}

// NewAlertEventWarning instantiates a new AlertEventWarning object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertEventWarning() *AlertEventWarning {
	this := AlertEventWarning{}
	return &this
}

// NewAlertEventWarningWithDefaults instantiates a new AlertEventWarning object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertEventWarningWithDefaults() *AlertEventWarning {
	this := AlertEventWarning{}
	return &this
}

// GetRemove returns the Remove field value if set, zero value otherwise.
func (o *AlertEventWarning) GetRemove() bool {
	if o == nil || o.Remove == nil {
		var ret bool
		return ret
	}
	return *o.Remove
}

// GetRemoveOk returns a tuple with the Remove field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertEventWarning) GetRemoveOk() (*bool, bool) {
	if o == nil || o.Remove == nil {
		return nil, false
	}
	return o.Remove, true
}

// HasRemove returns a boolean if a field has been set.
func (o *AlertEventWarning) HasRemove() bool {
	if o != nil && o.Remove != nil {
		return true
	}

	return false
}

// SetRemove gets a reference to the given bool and assigns it to the Remove field.
func (o *AlertEventWarning) SetRemove(v bool) {
	o.Remove = &v
}

// GetRules returns the Rules field value if set, zero value otherwise.
func (o *AlertEventWarning) GetRules() []SmartRule {
	if o == nil || o.Rules == nil {
		var ret []SmartRule
		return ret
	}
	return *o.Rules
}

// GetRulesOk returns a tuple with the Rules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertEventWarning) GetRulesOk() (*[]SmartRule, bool) {
	if o == nil || o.Rules == nil {
		return nil, false
	}
	return o.Rules, true
}

// HasRules returns a boolean if a field has been set.
func (o *AlertEventWarning) HasRules() bool {
	if o != nil && o.Rules != nil {
		return true
	}

	return false
}

// SetRules gets a reference to the given []SmartRule and assigns it to the Rules field.
func (o *AlertEventWarning) SetRules(v []SmartRule) {
	o.Rules = &v
}

func (o AlertEventWarning) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Remove != nil {
		toSerialize["remove"] = o.Remove
	}
	if o.Rules != nil {
		toSerialize["rules"] = o.Rules
	}
	return json.Marshal(toSerialize)
}

type NullableAlertEventWarning struct {
	value *AlertEventWarning
	isSet bool
}

func (v NullableAlertEventWarning) Get() *AlertEventWarning {
	return v.value
}

func (v *NullableAlertEventWarning) Set(val *AlertEventWarning) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertEventWarning) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertEventWarning) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertEventWarning(val *AlertEventWarning) *NullableAlertEventWarning {
	return &NullableAlertEventWarning{value: val, isSet: true}
}

func (v NullableAlertEventWarning) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertEventWarning) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


