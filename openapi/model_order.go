/*
 * Webull API
 *
 * Webull API Documentation
 *
 * API version: 3.0.1
 * Contact: austin.millan@gmail.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Order struct for Order
type Order struct {
	// Example: 'option'
	ComboTickerType *string `json:"combo_ticker_type,omitempty"`
	Legs *[]Leg `json:"legs,omitempty"`
	StatusCode *string `json:"status_code,omitempty"`
}

// NewOrder instantiates a new Order object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrder() *Order {
	this := Order{}
	return &this
}

// NewOrderWithDefaults instantiates a new Order object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderWithDefaults() *Order {
	this := Order{}
	return &this
}

// GetComboTickerType returns the ComboTickerType field value if set, zero value otherwise.
func (o *Order) GetComboTickerType() string {
	if o == nil || o.ComboTickerType == nil {
		var ret string
		return ret
	}
	return *o.ComboTickerType
}

// GetComboTickerTypeOk returns a tuple with the ComboTickerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetComboTickerTypeOk() (*string, bool) {
	if o == nil || o.ComboTickerType == nil {
		return nil, false
	}
	return o.ComboTickerType, true
}

// HasComboTickerType returns a boolean if a field has been set.
func (o *Order) HasComboTickerType() bool {
	if o != nil && o.ComboTickerType != nil {
		return true
	}

	return false
}

// SetComboTickerType gets a reference to the given string and assigns it to the ComboTickerType field.
func (o *Order) SetComboTickerType(v string) {
	o.ComboTickerType = &v
}

// GetLegs returns the Legs field value if set, zero value otherwise.
func (o *Order) GetLegs() []Leg {
	if o == nil || o.Legs == nil {
		var ret []Leg
		return ret
	}
	return *o.Legs
}

// GetLegsOk returns a tuple with the Legs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetLegsOk() (*[]Leg, bool) {
	if o == nil || o.Legs == nil {
		return nil, false
	}
	return o.Legs, true
}

// HasLegs returns a boolean if a field has been set.
func (o *Order) HasLegs() bool {
	if o != nil && o.Legs != nil {
		return true
	}

	return false
}

// SetLegs gets a reference to the given []Leg and assigns it to the Legs field.
func (o *Order) SetLegs(v []Leg) {
	o.Legs = &v
}

// GetStatusCode returns the StatusCode field value if set, zero value otherwise.
func (o *Order) GetStatusCode() string {
	if o == nil || o.StatusCode == nil {
		var ret string
		return ret
	}
	return *o.StatusCode
}

// GetStatusCodeOk returns a tuple with the StatusCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetStatusCodeOk() (*string, bool) {
	if o == nil || o.StatusCode == nil {
		return nil, false
	}
	return o.StatusCode, true
}

// HasStatusCode returns a boolean if a field has been set.
func (o *Order) HasStatusCode() bool {
	if o != nil && o.StatusCode != nil {
		return true
	}

	return false
}

// SetStatusCode gets a reference to the given string and assigns it to the StatusCode field.
func (o *Order) SetStatusCode(v string) {
	o.StatusCode = &v
}

func (o Order) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ComboTickerType != nil {
		toSerialize["combo_ticker_type"] = o.ComboTickerType
	}
	if o.Legs != nil {
		toSerialize["legs"] = o.Legs
	}
	if o.StatusCode != nil {
		toSerialize["status_code"] = o.StatusCode
	}
	return json.Marshal(toSerialize)
}

type NullableOrder struct {
	value *Order
	isSet bool
}

func (v NullableOrder) Get() *Order {
	return v.value
}

func (v *NullableOrder) Set(val *Order) {
	v.value = val
	v.isSet = true
}

func (v NullableOrder) IsSet() bool {
	return v.isSet
}

func (v *NullableOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrder(val *Order) *NullableOrder {
	return &NullableOrder{value: val, isSet: true}
}

func (v NullableOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


