/*
 * Webull API
 *
 * Webull API Documentation
 *
 * API version: 3.0.1
 * Contact: austin.millan@gmail.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GetTickerChartRequest struct for GetTickerChartRequest
type GetTickerChartRequest struct {
	// Number of bars to return
	Count *string `json:"count,omitempty"`
	// Whether to include pre-market and afterhours bars. '1' is used for pre-market and after-hours bars.
	ExtendTrading *int32 `json:"extendTrading,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewGetTickerChartRequest instantiates a new GetTickerChartRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetTickerChartRequest() *GetTickerChartRequest {
	this := GetTickerChartRequest{}
	var extendTrading int32 = 1
	this.ExtendTrading = &extendTrading
	return &this
}

// NewGetTickerChartRequestWithDefaults instantiates a new GetTickerChartRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetTickerChartRequestWithDefaults() *GetTickerChartRequest {
	this := GetTickerChartRequest{}
	var extendTrading int32 = 1
	this.ExtendTrading = &extendTrading
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *GetTickerChartRequest) GetCount() string {
	if o == nil || o.Count == nil {
		var ret string
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetTickerChartRequest) GetCountOk() (*string, bool) {
	if o == nil || o.Count == nil {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *GetTickerChartRequest) HasCount() bool {
	if o != nil && o.Count != nil {
		return true
	}

	return false
}

// SetCount gets a reference to the given string and assigns it to the Count field.
func (o *GetTickerChartRequest) SetCount(v string) {
	o.Count = &v
}

// GetExtendTrading returns the ExtendTrading field value if set, zero value otherwise.
func (o *GetTickerChartRequest) GetExtendTrading() int32 {
	if o == nil || o.ExtendTrading == nil {
		var ret int32
		return ret
	}
	return *o.ExtendTrading
}

// GetExtendTradingOk returns a tuple with the ExtendTrading field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetTickerChartRequest) GetExtendTradingOk() (*int32, bool) {
	if o == nil || o.ExtendTrading == nil {
		return nil, false
	}
	return o.ExtendTrading, true
}

// HasExtendTrading returns a boolean if a field has been set.
func (o *GetTickerChartRequest) HasExtendTrading() bool {
	if o != nil && o.ExtendTrading != nil {
		return true
	}

	return false
}

// SetExtendTrading gets a reference to the given int32 and assigns it to the ExtendTrading field.
func (o *GetTickerChartRequest) SetExtendTrading(v int32) {
	o.ExtendTrading = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *GetTickerChartRequest) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetTickerChartRequest) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *GetTickerChartRequest) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *GetTickerChartRequest) SetType(v string) {
	o.Type = &v
}

func (o GetTickerChartRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Count != nil {
		toSerialize["count"] = o.Count
	}
	if o.ExtendTrading != nil {
		toSerialize["extendTrading"] = o.ExtendTrading
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableGetTickerChartRequest struct {
	value *GetTickerChartRequest
	isSet bool
}

func (v NullableGetTickerChartRequest) Get() *GetTickerChartRequest {
	return v.value
}

func (v *NullableGetTickerChartRequest) Set(val *GetTickerChartRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGetTickerChartRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGetTickerChartRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetTickerChartRequest(val *GetTickerChartRequest) *NullableGetTickerChartRequest {
	return &NullableGetTickerChartRequest{value: val, isSet: true}
}

func (v NullableGetTickerChartRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetTickerChartRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


