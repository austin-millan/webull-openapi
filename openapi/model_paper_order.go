/*
 * Webull API
 *
 * Webull API Documentation
 *
 * API version: 3.0.1
 * Contact: austin.millan@gmail.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PaperOrder struct for PaperOrder
type PaperOrder struct {
	Action *OrderSide `json:"action,omitempty"`
	CanCancel *bool `json:"canCancel,omitempty"`
	CanModify *bool `json:"canModify,omitempty"`
	CreateTime *string `json:"createTime,omitempty"`
	CreateTime0 *int64 `json:"createTime0,omitempty"`
	FilledQuantity *string `json:"filledQuantity,omitempty"`
	LmtPrice *string `json:"lmtPrice,omitempty"`
	OrderId *int32 `json:"orderId,omitempty"`
	OrderType *OrderType `json:"orderType,omitempty"`
	OutsideRegularTradingHour *bool `json:"outsideRegularTradingHour,omitempty"`
	PaperId *int32 `json:"paperId,omitempty"`
	PlacedTime *string `json:"placedTime,omitempty"`
	Status *string `json:"status,omitempty"`
	StatusStr *string `json:"statusStr,omitempty"`
	Ticker *GetOrdersItemTicker `json:"ticker,omitempty"`
	TimeInForce *TimeInForce `json:"timeInForce,omitempty"`
	TotalQuantity *string `json:"totalQuantity,omitempty"`
}

// NewPaperOrder instantiates a new PaperOrder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaperOrder() *PaperOrder {
	this := PaperOrder{}
	return &this
}

// NewPaperOrderWithDefaults instantiates a new PaperOrder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaperOrderWithDefaults() *PaperOrder {
	this := PaperOrder{}
	return &this
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *PaperOrder) GetAction() OrderSide {
	if o == nil || o.Action == nil {
		var ret OrderSide
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaperOrder) GetActionOk() (*OrderSide, bool) {
	if o == nil || o.Action == nil {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *PaperOrder) HasAction() bool {
	if o != nil && o.Action != nil {
		return true
	}

	return false
}

// SetAction gets a reference to the given OrderSide and assigns it to the Action field.
func (o *PaperOrder) SetAction(v OrderSide) {
	o.Action = &v
}

// GetCanCancel returns the CanCancel field value if set, zero value otherwise.
func (o *PaperOrder) GetCanCancel() bool {
	if o == nil || o.CanCancel == nil {
		var ret bool
		return ret
	}
	return *o.CanCancel
}

// GetCanCancelOk returns a tuple with the CanCancel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaperOrder) GetCanCancelOk() (*bool, bool) {
	if o == nil || o.CanCancel == nil {
		return nil, false
	}
	return o.CanCancel, true
}

// HasCanCancel returns a boolean if a field has been set.
func (o *PaperOrder) HasCanCancel() bool {
	if o != nil && o.CanCancel != nil {
		return true
	}

	return false
}

// SetCanCancel gets a reference to the given bool and assigns it to the CanCancel field.
func (o *PaperOrder) SetCanCancel(v bool) {
	o.CanCancel = &v
}

// GetCanModify returns the CanModify field value if set, zero value otherwise.
func (o *PaperOrder) GetCanModify() bool {
	if o == nil || o.CanModify == nil {
		var ret bool
		return ret
	}
	return *o.CanModify
}

// GetCanModifyOk returns a tuple with the CanModify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaperOrder) GetCanModifyOk() (*bool, bool) {
	if o == nil || o.CanModify == nil {
		return nil, false
	}
	return o.CanModify, true
}

// HasCanModify returns a boolean if a field has been set.
func (o *PaperOrder) HasCanModify() bool {
	if o != nil && o.CanModify != nil {
		return true
	}

	return false
}

// SetCanModify gets a reference to the given bool and assigns it to the CanModify field.
func (o *PaperOrder) SetCanModify(v bool) {
	o.CanModify = &v
}

// GetCreateTime returns the CreateTime field value if set, zero value otherwise.
func (o *PaperOrder) GetCreateTime() string {
	if o == nil || o.CreateTime == nil {
		var ret string
		return ret
	}
	return *o.CreateTime
}

// GetCreateTimeOk returns a tuple with the CreateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaperOrder) GetCreateTimeOk() (*string, bool) {
	if o == nil || o.CreateTime == nil {
		return nil, false
	}
	return o.CreateTime, true
}

// HasCreateTime returns a boolean if a field has been set.
func (o *PaperOrder) HasCreateTime() bool {
	if o != nil && o.CreateTime != nil {
		return true
	}

	return false
}

// SetCreateTime gets a reference to the given string and assigns it to the CreateTime field.
func (o *PaperOrder) SetCreateTime(v string) {
	o.CreateTime = &v
}

// GetCreateTime0 returns the CreateTime0 field value if set, zero value otherwise.
func (o *PaperOrder) GetCreateTime0() int64 {
	if o == nil || o.CreateTime0 == nil {
		var ret int64
		return ret
	}
	return *o.CreateTime0
}

// GetCreateTime0Ok returns a tuple with the CreateTime0 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaperOrder) GetCreateTime0Ok() (*int64, bool) {
	if o == nil || o.CreateTime0 == nil {
		return nil, false
	}
	return o.CreateTime0, true
}

// HasCreateTime0 returns a boolean if a field has been set.
func (o *PaperOrder) HasCreateTime0() bool {
	if o != nil && o.CreateTime0 != nil {
		return true
	}

	return false
}

// SetCreateTime0 gets a reference to the given int64 and assigns it to the CreateTime0 field.
func (o *PaperOrder) SetCreateTime0(v int64) {
	o.CreateTime0 = &v
}

// GetFilledQuantity returns the FilledQuantity field value if set, zero value otherwise.
func (o *PaperOrder) GetFilledQuantity() string {
	if o == nil || o.FilledQuantity == nil {
		var ret string
		return ret
	}
	return *o.FilledQuantity
}

// GetFilledQuantityOk returns a tuple with the FilledQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaperOrder) GetFilledQuantityOk() (*string, bool) {
	if o == nil || o.FilledQuantity == nil {
		return nil, false
	}
	return o.FilledQuantity, true
}

// HasFilledQuantity returns a boolean if a field has been set.
func (o *PaperOrder) HasFilledQuantity() bool {
	if o != nil && o.FilledQuantity != nil {
		return true
	}

	return false
}

// SetFilledQuantity gets a reference to the given string and assigns it to the FilledQuantity field.
func (o *PaperOrder) SetFilledQuantity(v string) {
	o.FilledQuantity = &v
}

// GetLmtPrice returns the LmtPrice field value if set, zero value otherwise.
func (o *PaperOrder) GetLmtPrice() string {
	if o == nil || o.LmtPrice == nil {
		var ret string
		return ret
	}
	return *o.LmtPrice
}

// GetLmtPriceOk returns a tuple with the LmtPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaperOrder) GetLmtPriceOk() (*string, bool) {
	if o == nil || o.LmtPrice == nil {
		return nil, false
	}
	return o.LmtPrice, true
}

// HasLmtPrice returns a boolean if a field has been set.
func (o *PaperOrder) HasLmtPrice() bool {
	if o != nil && o.LmtPrice != nil {
		return true
	}

	return false
}

// SetLmtPrice gets a reference to the given string and assigns it to the LmtPrice field.
func (o *PaperOrder) SetLmtPrice(v string) {
	o.LmtPrice = &v
}

// GetOrderId returns the OrderId field value if set, zero value otherwise.
func (o *PaperOrder) GetOrderId() int32 {
	if o == nil || o.OrderId == nil {
		var ret int32
		return ret
	}
	return *o.OrderId
}

// GetOrderIdOk returns a tuple with the OrderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaperOrder) GetOrderIdOk() (*int32, bool) {
	if o == nil || o.OrderId == nil {
		return nil, false
	}
	return o.OrderId, true
}

// HasOrderId returns a boolean if a field has been set.
func (o *PaperOrder) HasOrderId() bool {
	if o != nil && o.OrderId != nil {
		return true
	}

	return false
}

// SetOrderId gets a reference to the given int32 and assigns it to the OrderId field.
func (o *PaperOrder) SetOrderId(v int32) {
	o.OrderId = &v
}

// GetOrderType returns the OrderType field value if set, zero value otherwise.
func (o *PaperOrder) GetOrderType() OrderType {
	if o == nil || o.OrderType == nil {
		var ret OrderType
		return ret
	}
	return *o.OrderType
}

// GetOrderTypeOk returns a tuple with the OrderType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaperOrder) GetOrderTypeOk() (*OrderType, bool) {
	if o == nil || o.OrderType == nil {
		return nil, false
	}
	return o.OrderType, true
}

// HasOrderType returns a boolean if a field has been set.
func (o *PaperOrder) HasOrderType() bool {
	if o != nil && o.OrderType != nil {
		return true
	}

	return false
}

// SetOrderType gets a reference to the given OrderType and assigns it to the OrderType field.
func (o *PaperOrder) SetOrderType(v OrderType) {
	o.OrderType = &v
}

// GetOutsideRegularTradingHour returns the OutsideRegularTradingHour field value if set, zero value otherwise.
func (o *PaperOrder) GetOutsideRegularTradingHour() bool {
	if o == nil || o.OutsideRegularTradingHour == nil {
		var ret bool
		return ret
	}
	return *o.OutsideRegularTradingHour
}

// GetOutsideRegularTradingHourOk returns a tuple with the OutsideRegularTradingHour field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaperOrder) GetOutsideRegularTradingHourOk() (*bool, bool) {
	if o == nil || o.OutsideRegularTradingHour == nil {
		return nil, false
	}
	return o.OutsideRegularTradingHour, true
}

// HasOutsideRegularTradingHour returns a boolean if a field has been set.
func (o *PaperOrder) HasOutsideRegularTradingHour() bool {
	if o != nil && o.OutsideRegularTradingHour != nil {
		return true
	}

	return false
}

// SetOutsideRegularTradingHour gets a reference to the given bool and assigns it to the OutsideRegularTradingHour field.
func (o *PaperOrder) SetOutsideRegularTradingHour(v bool) {
	o.OutsideRegularTradingHour = &v
}

// GetPaperId returns the PaperId field value if set, zero value otherwise.
func (o *PaperOrder) GetPaperId() int32 {
	if o == nil || o.PaperId == nil {
		var ret int32
		return ret
	}
	return *o.PaperId
}

// GetPaperIdOk returns a tuple with the PaperId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaperOrder) GetPaperIdOk() (*int32, bool) {
	if o == nil || o.PaperId == nil {
		return nil, false
	}
	return o.PaperId, true
}

// HasPaperId returns a boolean if a field has been set.
func (o *PaperOrder) HasPaperId() bool {
	if o != nil && o.PaperId != nil {
		return true
	}

	return false
}

// SetPaperId gets a reference to the given int32 and assigns it to the PaperId field.
func (o *PaperOrder) SetPaperId(v int32) {
	o.PaperId = &v
}

// GetPlacedTime returns the PlacedTime field value if set, zero value otherwise.
func (o *PaperOrder) GetPlacedTime() string {
	if o == nil || o.PlacedTime == nil {
		var ret string
		return ret
	}
	return *o.PlacedTime
}

// GetPlacedTimeOk returns a tuple with the PlacedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaperOrder) GetPlacedTimeOk() (*string, bool) {
	if o == nil || o.PlacedTime == nil {
		return nil, false
	}
	return o.PlacedTime, true
}

// HasPlacedTime returns a boolean if a field has been set.
func (o *PaperOrder) HasPlacedTime() bool {
	if o != nil && o.PlacedTime != nil {
		return true
	}

	return false
}

// SetPlacedTime gets a reference to the given string and assigns it to the PlacedTime field.
func (o *PaperOrder) SetPlacedTime(v string) {
	o.PlacedTime = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *PaperOrder) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaperOrder) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *PaperOrder) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *PaperOrder) SetStatus(v string) {
	o.Status = &v
}

// GetStatusStr returns the StatusStr field value if set, zero value otherwise.
func (o *PaperOrder) GetStatusStr() string {
	if o == nil || o.StatusStr == nil {
		var ret string
		return ret
	}
	return *o.StatusStr
}

// GetStatusStrOk returns a tuple with the StatusStr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaperOrder) GetStatusStrOk() (*string, bool) {
	if o == nil || o.StatusStr == nil {
		return nil, false
	}
	return o.StatusStr, true
}

// HasStatusStr returns a boolean if a field has been set.
func (o *PaperOrder) HasStatusStr() bool {
	if o != nil && o.StatusStr != nil {
		return true
	}

	return false
}

// SetStatusStr gets a reference to the given string and assigns it to the StatusStr field.
func (o *PaperOrder) SetStatusStr(v string) {
	o.StatusStr = &v
}

// GetTicker returns the Ticker field value if set, zero value otherwise.
func (o *PaperOrder) GetTicker() GetOrdersItemTicker {
	if o == nil || o.Ticker == nil {
		var ret GetOrdersItemTicker
		return ret
	}
	return *o.Ticker
}

// GetTickerOk returns a tuple with the Ticker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaperOrder) GetTickerOk() (*GetOrdersItemTicker, bool) {
	if o == nil || o.Ticker == nil {
		return nil, false
	}
	return o.Ticker, true
}

// HasTicker returns a boolean if a field has been set.
func (o *PaperOrder) HasTicker() bool {
	if o != nil && o.Ticker != nil {
		return true
	}

	return false
}

// SetTicker gets a reference to the given GetOrdersItemTicker and assigns it to the Ticker field.
func (o *PaperOrder) SetTicker(v GetOrdersItemTicker) {
	o.Ticker = &v
}

// GetTimeInForce returns the TimeInForce field value if set, zero value otherwise.
func (o *PaperOrder) GetTimeInForce() TimeInForce {
	if o == nil || o.TimeInForce == nil {
		var ret TimeInForce
		return ret
	}
	return *o.TimeInForce
}

// GetTimeInForceOk returns a tuple with the TimeInForce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaperOrder) GetTimeInForceOk() (*TimeInForce, bool) {
	if o == nil || o.TimeInForce == nil {
		return nil, false
	}
	return o.TimeInForce, true
}

// HasTimeInForce returns a boolean if a field has been set.
func (o *PaperOrder) HasTimeInForce() bool {
	if o != nil && o.TimeInForce != nil {
		return true
	}

	return false
}

// SetTimeInForce gets a reference to the given TimeInForce and assigns it to the TimeInForce field.
func (o *PaperOrder) SetTimeInForce(v TimeInForce) {
	o.TimeInForce = &v
}

// GetTotalQuantity returns the TotalQuantity field value if set, zero value otherwise.
func (o *PaperOrder) GetTotalQuantity() string {
	if o == nil || o.TotalQuantity == nil {
		var ret string
		return ret
	}
	return *o.TotalQuantity
}

// GetTotalQuantityOk returns a tuple with the TotalQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaperOrder) GetTotalQuantityOk() (*string, bool) {
	if o == nil || o.TotalQuantity == nil {
		return nil, false
	}
	return o.TotalQuantity, true
}

// HasTotalQuantity returns a boolean if a field has been set.
func (o *PaperOrder) HasTotalQuantity() bool {
	if o != nil && o.TotalQuantity != nil {
		return true
	}

	return false
}

// SetTotalQuantity gets a reference to the given string and assigns it to the TotalQuantity field.
func (o *PaperOrder) SetTotalQuantity(v string) {
	o.TotalQuantity = &v
}

func (o PaperOrder) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Action != nil {
		toSerialize["action"] = o.Action
	}
	if o.CanCancel != nil {
		toSerialize["canCancel"] = o.CanCancel
	}
	if o.CanModify != nil {
		toSerialize["canModify"] = o.CanModify
	}
	if o.CreateTime != nil {
		toSerialize["createTime"] = o.CreateTime
	}
	if o.CreateTime0 != nil {
		toSerialize["createTime0"] = o.CreateTime0
	}
	if o.FilledQuantity != nil {
		toSerialize["filledQuantity"] = o.FilledQuantity
	}
	if o.LmtPrice != nil {
		toSerialize["lmtPrice"] = o.LmtPrice
	}
	if o.OrderId != nil {
		toSerialize["orderId"] = o.OrderId
	}
	if o.OrderType != nil {
		toSerialize["orderType"] = o.OrderType
	}
	if o.OutsideRegularTradingHour != nil {
		toSerialize["outsideRegularTradingHour"] = o.OutsideRegularTradingHour
	}
	if o.PaperId != nil {
		toSerialize["paperId"] = o.PaperId
	}
	if o.PlacedTime != nil {
		toSerialize["placedTime"] = o.PlacedTime
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.StatusStr != nil {
		toSerialize["statusStr"] = o.StatusStr
	}
	if o.Ticker != nil {
		toSerialize["ticker"] = o.Ticker
	}
	if o.TimeInForce != nil {
		toSerialize["timeInForce"] = o.TimeInForce
	}
	if o.TotalQuantity != nil {
		toSerialize["totalQuantity"] = o.TotalQuantity
	}
	return json.Marshal(toSerialize)
}

type NullablePaperOrder struct {
	value *PaperOrder
	isSet bool
}

func (v NullablePaperOrder) Get() *PaperOrder {
	return v.value
}

func (v *NullablePaperOrder) Set(val *PaperOrder) {
	v.value = val
	v.isSet = true
}

func (v NullablePaperOrder) IsSet() bool {
	return v.isSet
}

func (v *NullablePaperOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaperOrder(val *PaperOrder) *NullablePaperOrder {
	return &NullablePaperOrder{value: val, isSet: true}
}

func (v NullablePaperOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaperOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


